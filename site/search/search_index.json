{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Heapster Overview Heapster is a monitoring metrics and events processing tool designed to work inside Kubernetes clusters. It consists of 2 components: Heapster core that reads metrics from Kubernetes cluster nodes (see sources ), do some processing and writes them to permanent storage (see sinks ). It also provides metrics for other Kubernetes components through Model API . Eventer that reads events from Kubernetes master (see sources ) and writes them to permanent storage (see sinks ).","title":"abc"},{"location":"#heapster-overview","text":"Heapster is a monitoring metrics and events processing tool designed to work inside Kubernetes clusters. It consists of 2 components: Heapster core that reads metrics from Kubernetes cluster nodes (see sources ), do some processing and writes them to permanent storage (see sinks ). It also provides metrics for other Kubernetes components through Model API . Eventer that reads events from Kubernetes master (see sources ) and writes them to permanent storage (see sinks ).","title":"Heapster Overview"},{"location":"model/","text":"Heapster Metric Model The Heapster Model is a structured representation of metrics for Kubernetes clusters, which is exposed through a set of REST API endpoints. It allows the extraction of up to 15 minutes of historical data for any Container, Pod, Node or Namespace in the cluster, as well as the cluster itself (depending on the metric). Please bear in mind that this is not an official Kubernetes API, we will try to keep it stable but we don't guarantee that we won't change it in the future. Usage The Heapster Model is enabled by default. The resolution of the model can be configured through the -model_resolution flag, which will cause the model to store historical data at the specified resolution. If the -model_resolution flag is not specified, the default resolution of 30 seconds will be used. API documentation A detailed documentation of each API endpoint is listed below. All endpoints ending in /metrics/{metric-name}/ can accept the optional start and end query parameters that represent the start and end time of the requested timeseries. The result will be a list of (Timestamp, Value) pairs in the time range [start, end]. start and end are strings formatted according to RFC3339. If start is not defined, it is assumed as the zero Unix epoch time. If end is not defined, then all data later than start will be returned. Cluster-level Metrics /api/v1/model/metrics/ : Returns a list of available cluster-level metrics. /api/v1/model/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested cluster-level metric, between the time range specified by start and end . Node-level Metrics /api/v1/model/nodes/ : Returns a list of all available nodes. /api/v1/model/nodes/{node-name}/metrics/ : Returns a list of available node-level metrics. /api/v1/model/nodes/{node-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested node-level metric, within the time range specified by start and end . Namespace-level Metrics /api/v1/model/namespaces/ : Returns a list of all available namespaces. /api/v1/model/namespaces/{namespace-name}/metrics/ : Returns a list of available namespace-level metrics. /api/v1/model/namespaces/{namespace-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested namespace-level metric, within the time range specified by start and end . Pod-level Metrics /api/v1/model/namespaces/{namespace-name}/pods/ : Returns a list of all available pods under a given namespace. /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/metrics/ : Returns a list of available pod-level metrics /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested pod-level metric, within the time range specified by start and end . Container-level Metrics Container metrics and stats are accessible for both containers that belong to pods, as well as for free containers running in each node. /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/ : Returns a list of all available containers under a given pod. /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/{container-name}/metrics/ : Returns a list of available container-level metrics /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/{container-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested container-level metric, within the time range specified by start and end . /api/v1/model/nodes/{node-name}/freecontainers/ : Returns a list of all available free containers under a given node. /api/v1/model/nodes/{node-name}/freecontainers/{container-name}/metrics/ : Returns a list of available container-level metrics /api/v1/model/nodes/{node-name}/freecontainers/{container-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested container-level metric, within the time range specified by start and end . Metric Types All metrics available in the storage schema are also available through the api.","title":"def"},{"location":"model/#heapster-metric-model","text":"The Heapster Model is a structured representation of metrics for Kubernetes clusters, which is exposed through a set of REST API endpoints. It allows the extraction of up to 15 minutes of historical data for any Container, Pod, Node or Namespace in the cluster, as well as the cluster itself (depending on the metric). Please bear in mind that this is not an official Kubernetes API, we will try to keep it stable but we don't guarantee that we won't change it in the future.","title":"Heapster Metric Model"},{"location":"model/#usage","text":"The Heapster Model is enabled by default. The resolution of the model can be configured through the -model_resolution flag, which will cause the model to store historical data at the specified resolution. If the -model_resolution flag is not specified, the default resolution of 30 seconds will be used.","title":"Usage"},{"location":"model/#api-documentation","text":"A detailed documentation of each API endpoint is listed below. All endpoints ending in /metrics/{metric-name}/ can accept the optional start and end query parameters that represent the start and end time of the requested timeseries. The result will be a list of (Timestamp, Value) pairs in the time range [start, end]. start and end are strings formatted according to RFC3339. If start is not defined, it is assumed as the zero Unix epoch time. If end is not defined, then all data later than start will be returned.","title":"API documentation"},{"location":"model/#cluster-level-metrics","text":"/api/v1/model/metrics/ : Returns a list of available cluster-level metrics. /api/v1/model/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested cluster-level metric, between the time range specified by start and end .","title":"Cluster-level Metrics"},{"location":"model/#node-level-metrics","text":"/api/v1/model/nodes/ : Returns a list of all available nodes. /api/v1/model/nodes/{node-name}/metrics/ : Returns a list of available node-level metrics. /api/v1/model/nodes/{node-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested node-level metric, within the time range specified by start and end .","title":"Node-level Metrics"},{"location":"model/#namespace-level-metrics","text":"/api/v1/model/namespaces/ : Returns a list of all available namespaces. /api/v1/model/namespaces/{namespace-name}/metrics/ : Returns a list of available namespace-level metrics. /api/v1/model/namespaces/{namespace-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested namespace-level metric, within the time range specified by start and end .","title":"Namespace-level Metrics"},{"location":"model/#pod-level-metrics","text":"/api/v1/model/namespaces/{namespace-name}/pods/ : Returns a list of all available pods under a given namespace. /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/metrics/ : Returns a list of available pod-level metrics /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested pod-level metric, within the time range specified by start and end .","title":"Pod-level Metrics"},{"location":"model/#container-level-metrics","text":"Container metrics and stats are accessible for both containers that belong to pods, as well as for free containers running in each node. /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/ : Returns a list of all available containers under a given pod. /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/{container-name}/metrics/ : Returns a list of available container-level metrics /api/v1/model/namespaces/{namespace-name}/pods/{pod-name}/containers/{container-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested container-level metric, within the time range specified by start and end . /api/v1/model/nodes/{node-name}/freecontainers/ : Returns a list of all available free containers under a given node. /api/v1/model/nodes/{node-name}/freecontainers/{container-name}/metrics/ : Returns a list of available container-level metrics /api/v1/model/nodes/{node-name}/freecontainers/{container-name}/metrics/{metric-name}?start=X&end=Y : Returns a set of (Timestamp, Value) pairs for the requested container-level metric, within the time range specified by start and end .","title":"Container-level Metrics"},{"location":"model/#metric-types","text":"All metrics available in the storage schema are also available through the api.","title":"Metric Types"},{"location":"source-configuration/","text":"Configuring sources Heapster can get data from multiple sources (although at this moment we support only one kind - Kubernetes). They are specified in the command line via the --source flag. The flag takes an argument of the form PREFIX:CONFIG[?OPTIONS] . Options (optional!) are specified as URL query parameters, separated by & as normal. This allows each source to have custom configuration passed to it without needing to continually add new flags to Heapster as new sources are added. This also means Heapster can capture metrics from multiple sources at once, potentially even multiple Kubernetes clusters. Current sources Kubernetes To use the kubernetes source add the following flag: --source=kubernetes:<KUBERNETES_MASTER>[?<KUBERNETES_OPTIONS>] If you're running Heapster in a Kubernetes pod you can use the following flag: --source=kubernetes Heapster requires an authentication token to connect with the apiserver securely. By default, Heapster will use the inClusterConfig system to configure the secure connection. This requires kubernetes version v1.0.3 or higher and a couple extra kubernetes configuration steps. Firstly, for your apiserver you must create an SSL certificate pair with a SAN that includes the ClusterIP of the kubernetes service. Look here for an example of how to properly generate certs. Secondly, you need to pass the ca.crt that you generated to the --root-ca-file option of the controller-manager. This will distribute the root CA to /var/run/secrets/kubernetes.io/serviceaccount/ of all pods. If you are using ABAC authorization (as opposed to AllowAll which is the default), you will also need to give the system:serviceaccount:<namespace-of-heapster>:default readonly access to the cluster (look here for more info). If you don't want to setup inClusterConfig, you can still use Heapster! To run without auth, use the following config: --source=kubernetes:http://<address-of-kubernetes-master>:<http-port>?inClusterConfig=false This requires the apiserver to be setup completely without auth, which can be done by binding the insecure port to all interfaces (see the apiserver --insecure-bind-address option) but WARNING be aware of the security repercussions. Only do this if you trust EVERYONE on your network. Note: Remove \"monitoring-token\" volume from heaspter controller config if you are running without auth. Alternatively, you can use a heapster-only serviceaccount like this: cat <EOF | kubectl create -f - apiVersion: v1 kind: ServiceAccount metadata: name: heapster EOF This will generate a token on the API server. You will then need to reference the service account in your Heapster pod spec like this: apiVersion: \"v1\" kind: \"ReplicationController\" metadata: labels: name: \"heapster\" name: \"monitoring-heapster-controller\" spec: replicas: 1 selector: name: \"heapster\" template: metadata: labels: name: \"heapster\" spec: serviceAccount: \"heapster\" containers: - image: \"kubernetes/heapster:v0.13.0\" name: \"heapster\" command: - \"/heapster\" - \"--source=kubernetes:http://kubernetes-ro?inClusterConfig=false&useServiceAccount=true&auth=\" - \"--sink=influxdb:http://monitoring-influxdb:80\" This will mount the generated token at /var/run/secrets/kubernetes.io/serviceaccount/token in the Heapster container. The following options are available: * inClusterConfig - Use kube config in service accounts associated with Heapster's namespace. (default: true) * kubeletPort - kubelet port to use (default: 10255 ) * kubeletHttps - whether to use https to connect to kubelets (default: false ) * apiVersion - API version to use to talk to Kubernetes. Defaults to the version in kubeConfig. * insecure - whether to trust kubernetes certificates (default: false ) * auth - client auth file to use. Set auth if the service accounts are not usable. * useServiceAccount - whether to use the service account token if one is mounted at /var/run/secrets/kubernetes.io/serviceaccount/token (default: false ) There is also a sub-source for metrics - kubernetes.summary_api - that uses a slightly different, memory-efficient API for passing data from Kubelet/cAdvisor to Heapster. It supports the same set of options as kubernetes . Sample usage: - --source=kubernetes.summary_api:''","title":"Source Configuration"},{"location":"source-configuration/#configuring-sources","text":"Heapster can get data from multiple sources (although at this moment we support only one kind - Kubernetes). They are specified in the command line via the --source flag. The flag takes an argument of the form PREFIX:CONFIG[?OPTIONS] . Options (optional!) are specified as URL query parameters, separated by & as normal. This allows each source to have custom configuration passed to it without needing to continually add new flags to Heapster as new sources are added. This also means Heapster can capture metrics from multiple sources at once, potentially even multiple Kubernetes clusters.","title":"Configuring sources"},{"location":"source-configuration/#current-sources","text":"","title":"Current sources"},{"location":"source-configuration/#kubernetes","text":"To use the kubernetes source add the following flag: --source=kubernetes:<KUBERNETES_MASTER>[?<KUBERNETES_OPTIONS>] If you're running Heapster in a Kubernetes pod you can use the following flag: --source=kubernetes Heapster requires an authentication token to connect with the apiserver securely. By default, Heapster will use the inClusterConfig system to configure the secure connection. This requires kubernetes version v1.0.3 or higher and a couple extra kubernetes configuration steps. Firstly, for your apiserver you must create an SSL certificate pair with a SAN that includes the ClusterIP of the kubernetes service. Look here for an example of how to properly generate certs. Secondly, you need to pass the ca.crt that you generated to the --root-ca-file option of the controller-manager. This will distribute the root CA to /var/run/secrets/kubernetes.io/serviceaccount/ of all pods. If you are using ABAC authorization (as opposed to AllowAll which is the default), you will also need to give the system:serviceaccount:<namespace-of-heapster>:default readonly access to the cluster (look here for more info). If you don't want to setup inClusterConfig, you can still use Heapster! To run without auth, use the following config: --source=kubernetes:http://<address-of-kubernetes-master>:<http-port>?inClusterConfig=false This requires the apiserver to be setup completely without auth, which can be done by binding the insecure port to all interfaces (see the apiserver --insecure-bind-address option) but WARNING be aware of the security repercussions. Only do this if you trust EVERYONE on your network. Note: Remove \"monitoring-token\" volume from heaspter controller config if you are running without auth. Alternatively, you can use a heapster-only serviceaccount like this: cat <EOF | kubectl create -f - apiVersion: v1 kind: ServiceAccount metadata: name: heapster EOF This will generate a token on the API server. You will then need to reference the service account in your Heapster pod spec like this: apiVersion: \"v1\" kind: \"ReplicationController\" metadata: labels: name: \"heapster\" name: \"monitoring-heapster-controller\" spec: replicas: 1 selector: name: \"heapster\" template: metadata: labels: name: \"heapster\" spec: serviceAccount: \"heapster\" containers: - image: \"kubernetes/heapster:v0.13.0\" name: \"heapster\" command: - \"/heapster\" - \"--source=kubernetes:http://kubernetes-ro?inClusterConfig=false&useServiceAccount=true&auth=\" - \"--sink=influxdb:http://monitoring-influxdb:80\" This will mount the generated token at /var/run/secrets/kubernetes.io/serviceaccount/token in the Heapster container. The following options are available: * inClusterConfig - Use kube config in service accounts associated with Heapster's namespace. (default: true) * kubeletPort - kubelet port to use (default: 10255 ) * kubeletHttps - whether to use https to connect to kubelets (default: false ) * apiVersion - API version to use to talk to Kubernetes. Defaults to the version in kubeConfig. * insecure - whether to trust kubernetes certificates (default: false ) * auth - client auth file to use. Set auth if the service accounts are not usable. * useServiceAccount - whether to use the service account token if one is mounted at /var/run/secrets/kubernetes.io/serviceaccount/token (default: false ) There is also a sub-source for metrics - kubernetes.summary_api - that uses a slightly different, memory-efficient API for passing data from Kubelet/cAdvisor to Heapster. It supports the same set of options as kubernetes . Sample usage: - --source=kubernetes.summary_api:''","title":"Kubernetes"},{"location":"thanh/","text":"asfdsadf sdfsdfsd Metric Types All metrics available in the storage schema are also available through the api.","title":"asfdsadf"},{"location":"thanh/#asfdsadf","text":"sdfsdfsd","title":"asfdsadf"},{"location":"thanh/#metric-types","text":"All metrics available in the storage schema are also available through the api.","title":"Metric Types"}]}